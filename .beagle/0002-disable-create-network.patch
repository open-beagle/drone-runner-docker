From 9991f3c6aefb99732b8c34f2ef59e93b1b8430dc Mon Sep 17 00:00:00 2001
From: shucheng <shucheng@bd-apaas.com>
Date: Mon, 27 Mar 2023 19:03:40 +0800
Subject: [PATCH] 1

---
 engine/convert.go |  8 +++----
 engine/engine.go  | 53 +++++++++++++++++++++++------------------------
 2 files changed, 30 insertions(+), 31 deletions(-)

diff --git a/engine/convert.go b/engine/convert.go
index b032058..10200c0 100644
--- a/engine/convert.go
+++ b/engine/convert.go
@@ -100,10 +100,10 @@ func toNetConfig(spec *Spec, proc *Step) *network.NetworkingConfig {
 		return &network.NetworkingConfig{}
 	}
 	endpoints := map[string]*network.EndpointSettings{}
-	endpoints[spec.Network.ID] = &network.EndpointSettings{
-		NetworkID: spec.Network.ID,
-		Aliases:   []string{proc.Name},
-	}
+	// endpoints[spec.Network.ID] = &network.EndpointSettings{
+	// 	NetworkID: spec.Network.ID,
+	// 	Aliases:   []string{proc.Name},
+	// }
 	return &network.NetworkingConfig{
 		EndpointsConfig: endpoints,
 	}
diff --git a/engine/engine.go b/engine/engine.go
index 70d33eb..43134e8 100644
--- a/engine/engine.go
+++ b/engine/engine.go
@@ -21,7 +21,6 @@ import (
 
 	"github.com/docker/docker/api/types"
 	"github.com/docker/docker/api/types/container"
-	"github.com/docker/docker/api/types/network"
 	"github.com/docker/docker/api/types/volume"
 	"github.com/docker/docker/client"
 	"github.com/docker/docker/errdefs"
@@ -83,15 +82,15 @@ func (e *Docker) Setup(ctx context.Context, specv runtime.Spec) error {
 
 	// creates the default pod network. All containers
 	// defined in the pipeline are attached to this network.
-	driver := "bridge"
-	if spec.Platform.OS == "windows" {
-		driver = "nat"
-	}
-	_, err := e.client.NetworkCreate(ctx, spec.Network.ID, types.NetworkCreate{
-		Driver:  driver,
-		Options: spec.Network.Options,
-		Labels:  spec.Network.Labels,
-	})
+	// driver := "bridge"
+	// if spec.Platform.OS == "windows" {
+	// 	driver = "nat"
+	// }
+	// _, err := e.client.NetworkCreate(ctx, spec.Network.ID, types.NetworkCreate{
+	// 	Driver:  driver,
+	// 	Options: spec.Network.Options,
+	// 	Labels:  spec.Network.Labels,
+	// })
 
 	// launches the inernal setup steps
 	for _, step := range spec.Internal {
@@ -122,7 +121,7 @@ func (e *Docker) Setup(ctx context.Context, specv runtime.Spec) error {
 		}
 	}
 
-	return errors.TrimExtraInfo(err)
+	return errors.TrimExtraInfo(nil)
 }
 
 // Destroy the pipeline environment.
@@ -174,12 +173,12 @@ func (e *Docker) Destroy(ctx context.Context, specv runtime.Spec) error {
 	}
 
 	// cleanup the network
-	if err := e.client.NetworkRemove(ctx, spec.Network.ID); err != nil {
-		logger.FromContext(ctx).
-			WithError(err).
-			WithField("network", spec.Network.ID).
-			Debugln("cannot remove network")
-	}
+	// if err := e.client.NetworkRemove(ctx, spec.Network.ID); err != nil {
+	// 	logger.FromContext(ctx).
+	// 		WithError(err).
+	// 		WithField("network", spec.Network.ID).
+	// 		Debugln("cannot remove network")
+	// }
 
 	// notice that we never collect or return any errors.
 	// this is because we silently ignore cleanup failures
@@ -294,16 +293,16 @@ func (e *Docker) create(ctx context.Context, spec *Spec, step *Step, output io.W
 
 	// attach the container to user-defined networks.
 	// primarily used to attach global user-defined networks.
-	if step.Network == "" {
-		for _, net := range step.Networks {
-			err = e.client.NetworkConnect(ctx, net, step.ID, &network.EndpointSettings{
-				Aliases: []string{net},
-			})
-			if err != nil {
-				return nil
-			}
-		}
-	}
+	// if step.Network == "" {
+	// 	for _, net := range step.Networks {
+	// 		err = e.client.NetworkConnect(ctx, net, step.ID, &network.EndpointSettings{
+	// 			Aliases: []string{net},
+	// 		})
+	// 		if err != nil {
+	// 			return nil
+	// 		}
+	// 	}
+	// }
 
 	return nil
 }
-- 
2.35.1

